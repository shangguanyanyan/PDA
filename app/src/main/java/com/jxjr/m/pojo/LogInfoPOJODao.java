package com.jxjr.m.pojo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.jxjr.m.dbcode.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOG_INFO_POJO.
*/
public class LogInfoPOJODao extends AbstractDao<LogInfoPOJO, Long> {

    public static final String TABLENAME = "LOG_INFO_POJO";

    /**
     * Properties of entity LogInfoPOJO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FDateTime = new Property(1, String.class, "fDateTime", false, "F_DATE_TIME");
        public final static Property FMod = new Property(2, String.class, "fMod", false, "F_MOD");
        public final static Property FUserID = new Property(3, Integer.class, "fUserID", false, "F_USER_ID");
        public final static Property FUserNumber = new Property(4, String.class, "fUserNumber", false, "F_USER_NUMBER");
        public final static Property FUserName = new Property(5, String.class, "fUserName", false, "F_USER_NAME");
        public final static Property FGzID = new Property(6, Integer.class, "fGzID", false, "F_GZ_ID");
        public final static Property FGzNumber = new Property(7, String.class, "fGzNumber", false, "F_GZ_NUMBER");
        public final static Property FGzName = new Property(8, String.class, "fGzName", false, "F_GZ_NAME");
        public final static Property FBmID = new Property(9, Integer.class, "fBmID", false, "F_BM_ID");
        public final static Property FBmNumber = new Property(10, String.class, "fBmNumber", false, "F_BM_NUMBER");
        public final static Property FBmName = new Property(11, String.class, "fBmName", false, "F_BM_NAME");
        public final static Property FDescription = new Property(12, String.class, "fDescription", false, "F_DESCRIPTION");
        public final static Property DeviceID = new Property(13, String.class, "deviceID", false, "DEVICE_ID");
    };


    public LogInfoPOJODao(DaoConfig config) {
        super(config);
    }
    
    public LogInfoPOJODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOG_INFO_POJO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'F_DATE_TIME' TEXT," + // 1: fDateTime
                "'F_MOD' TEXT," + // 2: fMod
                "'F_USER_ID' INTEGER," + // 3: fUserID
                "'F_USER_NUMBER' TEXT," + // 4: fUserNumber
                "'F_USER_NAME' TEXT," + // 5: fUserName
                "'F_GZ_ID' INTEGER," + // 6: fGzID
                "'F_GZ_NUMBER' TEXT," + // 7: fGzNumber
                "'F_GZ_NAME' TEXT," + // 8: fGzName
                "'F_BM_ID' INTEGER," + // 9: fBmID
                "'F_BM_NUMBER' TEXT," + // 10: fBmNumber
                "'F_BM_NAME' TEXT," + // 11: fBmName
                "'F_DESCRIPTION' TEXT," + // 12: fDescription
                "'DEVICE_ID' TEXT);"); // 13: deviceID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOG_INFO_POJO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LogInfoPOJO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fDateTime = entity.getFDateTime();
        if (fDateTime != null) {
            stmt.bindString(2, fDateTime);
        }
 
        String fMod = entity.getFMod();
        if (fMod != null) {
            stmt.bindString(3, fMod);
        }
 
        Integer fUserID = entity.getFUserID();
        if (fUserID != null) {
            stmt.bindLong(4, fUserID);
        }
 
        String fUserNumber = entity.getFUserNumber();
        if (fUserNumber != null) {
            stmt.bindString(5, fUserNumber);
        }
 
        String fUserName = entity.getFUserName();
        if (fUserName != null) {
            stmt.bindString(6, fUserName);
        }
 
        Integer fGzID = entity.getFGzID();
        if (fGzID != null) {
            stmt.bindLong(7, fGzID);
        }
 
        String fGzNumber = entity.getFGzNumber();
        if (fGzNumber != null) {
            stmt.bindString(8, fGzNumber);
        }
 
        String fGzName = entity.getFGzName();
        if (fGzName != null) {
            stmt.bindString(9, fGzName);
        }
 
        Integer fBmID = entity.getFBmID();
        if (fBmID != null) {
            stmt.bindLong(10, fBmID);
        }
 
        String fBmNumber = entity.getFBmNumber();
        if (fBmNumber != null) {
            stmt.bindString(11, fBmNumber);
        }
 
        String fBmName = entity.getFBmName();
        if (fBmName != null) {
            stmt.bindString(12, fBmName);
        }
 
        String fDescription = entity.getFDescription();
        if (fDescription != null) {
            stmt.bindString(13, fDescription);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(14, deviceID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LogInfoPOJO readEntity(Cursor cursor, int offset) {
        LogInfoPOJO entity = new LogInfoPOJO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fDateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fMod
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // fUserID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fUserNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fUserName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // fGzID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fGzNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fGzName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // fBmID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fBmNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fBmName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fDescription
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // deviceID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LogInfoPOJO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFDateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFMod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFUserID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFUserNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFGzID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFGzNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFGzName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFBmID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFBmNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFBmName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFDescription(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeviceID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LogInfoPOJO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LogInfoPOJO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
