package com.jxjr.m.pojo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.jxjr.m.dbcode.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASE_INFO_OBJECT_POJO.
*/
public class BaseInfoObjectPOJODao extends AbstractDao<BaseInfoObjectPOJO, Long> {

    public static final String TABLENAME = "BASE_INFO_OBJECT_POJO";

    /**
     * Properties of entity BaseInfoObjectPOJO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FItemClass = new Property(1, String.class, "fItemClass", false, "F_ITEM_CLASS");
        public final static Property FItemID = new Property(2, String.class, "fItemID", false, "F_ITEM_ID");
        public final static Property FNumber = new Property(3, String.class, "fNumber", false, "F_NUMBER");
        public final static Property FName = new Property(4, String.class, "fName", false, "F_NAME");
        public final static Property FParam = new Property(5, String.class, "fParam", false, "F_PARAM");
        public final static Property Forgid = new Property(6, String.class, "forgid", false, "FORGID");
    };


    public BaseInfoObjectPOJODao(DaoConfig config) {
        super(config);
    }
    
    public BaseInfoObjectPOJODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASE_INFO_OBJECT_POJO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'F_ITEM_CLASS' TEXT," + // 1: fItemClass
                "'F_ITEM_ID' TEXT," + // 2: fItemID
                "'F_NUMBER' TEXT," + // 3: fNumber
                "'F_NAME' TEXT," + // 4: fName
                "'F_PARAM' TEXT," + // 5: fParam
                "'FORGID' TEXT);"); // 6: forgid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_INFO_OBJECT_POJO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BaseInfoObjectPOJO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fItemClass = entity.getFItemClass();
        if (fItemClass != null) {
            stmt.bindString(2, fItemClass);
        }
 
        String fItemID = entity.getFItemID();
        if (fItemID != null) {
            stmt.bindString(3, fItemID);
        }
 
        String fNumber = entity.getFNumber();
        if (fNumber != null) {
            stmt.bindString(4, fNumber);
        }
 
        String fName = entity.getFName();
        if (fName != null) {
            stmt.bindString(5, fName);
        }
 
        String fParam = entity.getFParam();
        if (fParam != null) {
            stmt.bindString(6, fParam);
        }
 
        String forgid = entity.getForgid();
        if (forgid != null) {
            stmt.bindString(7, forgid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BaseInfoObjectPOJO readEntity(Cursor cursor, int offset) {
        BaseInfoObjectPOJO entity = new BaseInfoObjectPOJO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fItemClass
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fItemID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fParam
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // forgid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BaseInfoObjectPOJO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFItemClass(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFItemID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFParam(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setForgid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BaseInfoObjectPOJO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BaseInfoObjectPOJO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
