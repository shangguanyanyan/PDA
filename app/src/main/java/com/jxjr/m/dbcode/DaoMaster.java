package com.jxjr.m.dbcode;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import android.util.Log;

import com.jxjr.m.pojo.BaseInfoObjectPOJODao;
import com.jxjr.m.pojo.BillCodePOJODao;
import com.jxjr.m.pojo.LogInfoPOJODao;
import com.jxjr.utility.CustomPathDatabaseContext;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        BaseInfoObjectPOJODao.createTable(db, ifNotExists);
        BillCodePOJODao.createTable(db, ifNotExists);
//        SBInfoObjectPOJODao.createTable(db, ifNotExists);
//        LineInfoObjectPOJODao.createTable(db, ifNotExists);
//        TaskObjectPOJODao.createTable(db, ifNotExists);
//        RhDysInfoPOJODao.createTable(db, ifNotExists);
//        DwxOrDysYCInfoPOJODao.createTable(db, ifNotExists);
//        YcWxInfoPOJODao.createTable(db, ifNotExists);
//        YcYsInfoPOJODao.createTable(db, ifNotExists);
//        RhYsInfoPOJODao.createTable(db, ifNotExists);
//        TreeNodeBeanPOJODao.createTable(db, ifNotExists);
//        PhoneTaskObjectPOJODao.createTable(db, ifNotExists);
//        LogInfoPOJODao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        BaseInfoObjectPOJODao.dropTable(db, ifExists);
        BillCodePOJODao.dropTable(db, ifExists);
//        SBInfoObjectPOJODao.dropTable(db, ifExists);
//        LineInfoObjectPOJODao.dropTable(db, ifExists);
//        TaskObjectPOJODao.dropTable(db, ifExists);
//        RhDysInfoPOJODao.dropTable(db, ifExists);
//        DwxOrDysYCInfoPOJODao.dropTable(db, ifExists);
//        YcWxInfoPOJODao.dropTable(db, ifExists);
//        YcYsInfoPOJODao.dropTable(db, ifExists);
//        RhYsInfoPOJODao.dropTable(db, ifExists);
//        TreeNodeBeanPOJODao.dropTable(db, ifExists);
//        PhoneTaskObjectPOJODao.dropTable(db, ifExists);
//        LogInfoPOJODao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
    	public DevOpenHelper(Context context, String name, CursorFactory factory) {
         super(context, name, factory);
      }
  		
  	//Me+  **************************************
  /*	 public DevOpenHelper(Context context, String name, CursorFactory factory) {
           super(new CustomPathDatabaseContext(context, getDirPath()), name, factory);
       }*/
      /**
       * 获取db文件在sd卡的路径
       * @return
       */
      private static String getDirPath(){
              //TODO 这里返回存放db的文件夹的绝对路径
              return Environment.getExternalStorageDirectory()+"/LF/database";
      }
      
      //****************************************

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(BaseInfoObjectPOJODao.class);
        registerDaoClass(BillCodePOJODao.class);
//        registerDaoClass(SBInfoObjectPOJODao.class);
//        registerDaoClass(LineInfoObjectPOJODao.class);
//        registerDaoClass(TaskObjectPOJODao.class);
//        registerDaoClass(RhDysInfoPOJODao.class);
//        registerDaoClass(DwxOrDysYCInfoPOJODao.class);
//        registerDaoClass(YcWxInfoPOJODao.class);
//        registerDaoClass(YcYsInfoPOJODao.class);
//        registerDaoClass(RhYsInfoPOJODao.class);
//        registerDaoClass(TreeNodeBeanPOJODao.class);
//        registerDaoClass(PhoneTaskObjectPOJODao.class);
        registerDaoClass(LogInfoPOJODao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
